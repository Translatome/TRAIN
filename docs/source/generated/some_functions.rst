
..  _some_functions:

some_function.R
===============

This R script file contains several functions used in the others R scripts.


`ImportFileAsDF`
----------------

Description
~~~~~~~~~~~
This function imports a count file and converts it to a data.frame object using the fread() function from the data.table library.
It also renames the columns based on the provided count type.

Usage
~~~~~

::

    ImportFileAsDF(dataframe, count_tool)


Arguments
~~~~~~~~~

    * `dataframe` The name of the file containing the count data.
    * `count_tool` The type of count used.
        Options available:
            * `"featurecounts"` for count generated by FeatureCounts.
            * `"htseq"` for count generated by HTSeq.
            * `""` only if columns have the same names as samples names

Value
~~~~~
The function returns a data.frame object containing the imported and renamed count data.

Examples
~~~~~~~~

::

    # Import of a featurecounts table
    data <- ImportFileAsDF("data.txt", "featurecounts")
    head(data)
    # Import of a htseq-counts table
    data <- ImportFileAsDF("data.txt", "htseq")
    head(data)

.. note:: 
    **See also:**
    `data.table::fread() <https://rdrr.io/github/Rdatatable/data.table/man/fread.html>`__



`FilterMethods`
---------------

Description
~~~~~~~~~~~
This function filters low-count genes from a DESeq2 object based on the provided metadata and filtering method.

Usage
~~~~~

::

    FilterMethods(deseq2_objt, metadata, filtering, verbose)


Arguments
~~~~~~~~~

    * `deseq2_objt` A DESeq2 object containing count data.
    * `metadata` A data frame containing metadata information.
        Must include a column for replicates and a column for experimental design.
    * `filtering` The type of filtering method to use. 
        Options available:
            `"edger"`: Filter by expression using edgeR package.
            `"deseq"`: Filter by count using DESeq2 package.
            `"none"`: No filtering.
    * `verbose` A boolean value indicating whether to print verbose output (i.e., filtering results) or not.

Value
~~~~~
The function returns a DESeq2 object with low-count genes filtered out.

Examples
~~~~~~~~

::

    # Filter low-count genes using edgeR filtering method 
    # and print verbose output
    my_filtered_data <- FilterMethods(
        my_deseq2_objt, 
        my_metadata, 
        "edger", 
        TRUE
        )
    head(counts(my_filtered_data))

    # Filter low-count genes using DESeq filtering method 
    # and do not print verbose output
    my_filtered_data <- FilterMethods(
        my_deseq2_objt, 
        my_metadata, 
        "deseq", 
        FALSE
        )
    head(counts(my_filtered_data))

.. note:: 
    **See also:**
        * `DESeq2 package documentation <http://bioconductor.org/packages/release/bioc/html/DESeq2.html>`__
        * `edgeR package documentation <http://bioconductor.org/packages/release/bioc/html/edgeR.html>`__



`ScreeHist`
-----------

Description
~~~~~~~~~~~
The ScreeHist function generates a scree plot which displays the percentage of variance explained by each principal component of a given dataset.

Usage
~~~~~

::

    ScreeHist(X, geom = c("bar", "line"), ncp = 10)


Arguments
~~~~~~~~~

    * `X`: a numeric matrix or data frame containing the principal component scores.
    * `geom`: a character vector that specifies the type of geometries to be plotted. It can take "bar" and/or "line". Default value is "bar" and "line".
    * `ncp`: a positive integer specifying the maximum number of principal components to be displayed. Default value is 10.


Details
~~~~~~~
The function extracts the top ncp principal components from the input X, and generates a scree plot using ggplot2 package. The plot shows the percentage of variance explained by each component, along with the cumulative percentage of variance explained. It also includes a red dashed line at 80% to indicate the suggested number of components to retain.

Value
~~~~~
The function returns a ggplot object.

Examples
~~~~~~~~

::

    # Generate simulated data
    set.seed(123)
    X < * matrix(rnorm(400), nrow = 40, ncol = 10)
    pca <- prcomp(X)
    # Generate scree plot with both line and bar plot
    ScreeHist(X = pca$x, geom = c("bar", "line"), ncp = 10)

.. note:: 
    **See also:**
    `ggplot2 package documentation <https://www.rdocumentation.org/packages/ggplot2/versions/3.4.2>`__



`ComputePCA2cond`
-----------------


Description
~~~~~~~~~~~
Compute PCA on a DESeq2 count matrix with 2 conditions.

Usage
~~~~~

::

    ComputePCA2cond(dataframe, metadata, design, factor1, factor2, filtering, model, respath)


Arguments
~~~~~~~~~

    * `dataframe`: A matrix of read counts, with rows as genes and columns as samples.
    * `metadata`: A data frame containing the experimental design of the samples.
    * `design`: The experimental design formula.
    * `factor1`: The name of the first factor for PCA grouping.
    * `factor2`: The name of the second factor for PCA grouping.
    * `filtering`: The name of the method for filtering samples.
    * `model`: The type of model for fitting dispersion.
    * `respath`: The path to the folder to store results.

Details
~~~~~~~
This function creates a DESeqDataSet object, normalizes it and estimates dispersions.
Samples can be filtered using a specified method (see FilterMethods function).
Customized PCA transformation is performed based on the number of samples.
The PCA data, the PCA scree plot, and the cumulative variance are exported.
A histogram of the scree plot is also produced (see ScreeHist function).

Value
~~~~~
A list containing the following components:

    * `all_pca`: The PCA object containing all the principal components.
    * `pcaDATA`: The PCA data, used for plotting.
    * `eig_val`: A data frame containing the eigenvalues for each principal component.


Examples
~~~~~~~~

::

    data("iris")
    iris_counts <- as.matrix(iris[, 1:4])
    metadata <- iris[, 5]
    metadata <- data.frame(Species = factor(metadata))
    dds <- DESeqDataSetFromMatrix(countData = iris_counts,colData = metadata,design = ~ Species)
    res <- ComputePCA2cond(dataframe = iris_counts,
                            metadata = metadata,
                            design = ~ Species,
                            factor1 = "Species",
                            factor2 = "",
                            filtering = "deseq",
                            model = "parametric",
                            respath = ".")

.. note:: 
    **See also:**
    `DESeq2 package documentation <http://bioconductor.org/packages/release/bioc/html/DESeq2.html>`__



`PCAplots2cond`
---------------

Description
~~~~~~~~~~~
This function generates a 2D plot of principal component analysis (PCA) with color and shape-coded factors. The plot is saved in PNG and PDF format.

Usage
~~~~~

::

    PCAplots2cond(pcaData, eigvalue, factor1, factor2, respath)


Arguments
~~~~~~~~~

    * `pcaData`: a matrix or data frame containing the PCA data.
    * `eigvalue`: a numeric vector of eigenvalues.
    * `factor1`: a character vector of the factor used for color-coding.
    * `factor2`: a character vector of the factor used for shape-coding.
    * `respath`: a character string indicating the path to save the output plot files.

Details
~~~~~~~
This function creates a 2D plot of principal component analysis (PCA) based on the input data. The plot displays the first two principal components with color and shape-coded factors. The plot is saved in both PNG and PDF format for further use.

Value
~~~~~
The function returns the plot generated as a ggplot2 object.

Examples
~~~~~~~~

::

    library(ggplot2)
    data(iris)
    iris_pca <- prcomp(iris[, 1:4], center = TRUE, scale. = TRUE)
    PCAplots2cond(iris_pca$x,
                iris_pca$sdev^2,
                factor1 = "Species",
                factor2 = "Species",
                respath = "./")

.. note:: 
    **See also:**
    `ggplot2 package documentation <https://www.rdocumentation.org/packages/ggplot2/versions/3.4.2>`__



`ComparisonToTest`
------------------

Description
~~~~~~~~~~~
This function performs differential analysis on the count data using DESeq2 package in R. The function compares two groups (var1 and var2) and identifies differentially expressed genes. The function generates a histogram of p-values and exports the table of complete results with a summary of filtered results based on the adjusted p-value and log fold change.

Usage
~~~~~

::

    ComparisonToTest(cons, test, var1, var2, logF, adj_pval, respath)


Arguments
~~~~~~~~~

    * `cons`: DESeqDataSet object containing the count data.
    * `test`: The condition that will be tested (as a character string).
    * `var1`: First group to be compared (as a character string).
    * `var2`: Second group to be compared (as a character string).
    * `logF`: Absolute value of the log fold change threshold to filter the differentially expressed genes.
    * `adj_pval`: Adjusted p-value threshold to filter the differentially expressed genes.
    * `respath`: A character string specifying the path to store the results.


Details
~~~~~~~

    * This function uses the results function from DESeq2 package to perform differential analysis.
    * A histogram of the p-values is generated and saved as a PNG file.
    * The complete results table is saved as a TSV file.
    * The function also prints the number of upregulated and downregulated genes and the total number of deregulated genes based on the adjusted p-value and log fold change threshold.


Value
~~~~~
The function returns a data.frame with the complete results of differential analysis.

Examples
~~~~~~~~

::

    # load DESeq2 library and example dataset
    library(DESeq2)
    data("DESeqDataSetFromMatrix")
    dds <- DESeqDataSetFromMatrix(countData = counts,colData = colData,design = ~ group)
    # run ComparisonToTest function
    ComparisonToTest(cons = dds,
                    test = "group",
                    var1 = "A",
                    var2 = "B",
                    logF = 2,
                    adj_pval = 0.05,
                    respath = "results/")

.. note:: 
    **See also:**
    `DESeq2 package documentation <http://bioconductor.org/packages/release/bioc/html/DESeq2.html>`__




`callAPI`
---------

Description
~~~~~~~~~~~
The callAPI function is used to perform Gene Ontology enrichment analysis using the gost function from the gprofiler2 R package. The function takes in input several parameters such as gene_list, background_list, organism_name, pval_thr, correction, user_sources, and respath.

Usage
~~~~~

::

    callAPI(
        gene_list,
        background_list,
        organism_name,
        pval_thr,
        correction,
        user_sources,
        respath
    )


Arguments
~~~~~~~~~

    * `gene_list`: A character vector of gene symbols to be used as the query list for the enrichment analysis.
    * `background_list`: A character vector of gene symbols to be used as the background list for the enrichment analysis.
    * `organism_name`: A character string specifying the organism name for the enrichment analysis.
    * `pval_thr`: A numeric value specifying the p-value threshold for the enrichment analysis.
    * `correction`: A character string specifying the multiple testing correction method for the enrichment analysis.
    * `user_sources`: A character vector specifying the data sources to be used for the enrichment analysis.
    * `respath`: A character string specifying the path and filename for the output file.


Details
~~~~~~~
The function uses the gost function to perform Gene Ontology enrichment analysis on the input gene_list using the specified background_list as the
background. The organism_name parameter specifies the organism for the enrichment analysis. The pval_thr parameter specifies the p-value threshold
for significance. The correction parameter specifies the multiple testing correction method to be used. The user_sources parameter specifies the data
sources to be used for the enrichment analysis. The respath parameter specifies the path and filename for the output file.

Value
~~~~~
The function returns the gpro object returned by the gost function.
If the enrichment is null, the function will print a warning message and return "WARNING: enrichment is null."

Examples
~~~~~~~~

::

    gene_list <- c("BRCA1", "BRCA2", "TP53")
    background_list <- c("ALB", "APOE", "EGFR", "ACTB", "GAPDH")
    organism_name <- "hsapiens"
    pval_thr <- 0.05
    correction <- "bonferroni"
    user_sources <- c("GO:BP", "WP", "CORUM")
    respath <- "enrichment_results.tsv"

    enrichment <- callAPI(
        gene_list,
        background_list,
        organism_name,
        pval_thr,
        correction,
        user_sources,
        respath
        )

.. note:: 
    **See also:**
    `gost function documentation <https://www.rdocumentation.org/packages/gprofiler2/versions/0.2.1/topics/gost>`__



Specific theme for dotplot
--------------------------

Theme_dose and default_labeller functions provide from the work of Guangchuang YU Lab.
Origin packages: DOSE & enrichplot due to incomptibilities with other packages in the R conda env, we choose to include only functionnalities required for the analysis.

Credits
~~~~~~~
    * Author:  Guangchuang YU Lab
    * Git: https://github.com/YuLab-SMU


ggplot theme of DOSE
@title `theme_dose`
@param font.size font size
@return ggplot theme
@importFrom ggplot2 theme_bw
@importFrom ggplot2 theme
@importFrom ggplot2 element_text
@importFrom ggplot2 margin
@examples
library(ggplot2)
qplot(1:10) + theme_dose()
@export


`default_labeller`
default labeling function that uses the
internal string wrapping function `yulab.utils::str_wrap`
wraping long string to multiple lines
@title str_wrap
@param string input string
@param width the maximum number of characters before wrapping to a new line
@return update strings with new line character inserted
@export
@author Guangchuang Yu and Erqiang Hu


`dotplot_classic`
-----------------

Description
~~~~~~~~~~~
Creates a dotplot using ggplot2 to display results from an enrichment analysis. The function takes as input an enrichResult dataframe and parameters to customize the plot.

Usage
~~~~~

::

    dotplot_classic(object,
                    x = "term_size",
                    color = "p.adjust",
                    showCategory,
                    size = NULL,
                    font.size,
                    title = "",
                    orderBy = "x",
                    decreasing = TRUE,
                    label_format
                    )


Arguments
~~~~~~~~~

    * `object`: a dataframe containing enrichment results.
    * `x`: A string specifying the column in the enrichResult object to use as the x-axis values. Defaults to "term_size".
    * `color`: A string specifying the column in the enrichResult object to use as the color for the points. Can be one of "pvalue", "p.adjust", or "qvalue". Defaults to "p.adjust".
    * `showCategory`: An integer specifying the number of categories to display in the plot.
    * `size`: A string specifying the column in the enrichResult object to use for the size of the points. Defaults to NULL.
    * `font.size`: An integer specifying the font size to use for the plot. Defaults to 12.
    * `title`: A string specifying the title of the plot. Defaults to an empty string.
    * `orderBy`: A string specifying the column in the enrichResult object to use for ordering the categories. If the parameter is set to an invalid column name, it defaults to "x".
    * `decreasing`: A logical value indicating whether to order the categories in decreasing order. Defaults to TRUE.
    * `label_format`: A string or function to customize the labels for the y-axis
        If a function is passed, it is applied to each label. If a string is passed, it is parsed with dplyr::interp() and then used to create a function to format the labels.
        Defaults to the default labeller function.

Value
~~~~~
The function returns a ggplot object.

Examples
~~~~~~~~

::

    # Load the required package
    library(ReactomePA)
    # Create a sample enrichResult object
    data(geneList)
    data(geneListBackground)
    res <- enrichPathway(gene = geneList,
                        universe = geneListBackground,
                        organism = "hsa",
                        pvalueCutoff = 0.05)

    # Plot the top 5 categories by term size
    dotplot_classic(res, showCategory = 5)

    # Plot the top 5 categories by p-value and use a custom label format
    dotplot_classic(res, showCategory = 5, orderBy = "p.adjust",
                    label_format = function(label) {
                        paste0(substr(label, 1, 20), "...")
                    })

Credits
~~~~~~~
    * Author: Guangchuang YU Lab
    * Reimplemented by: Julie Ripoll
    * Date: 2023-04-19
    * License: CeCILL


`gproGraph`
-----------

Description
~~~~~~~~~~~
`gproGraph` is a function that takes the output of the gost function (gpro) and generates two plots: a bar plot and a dot plot. The bar plot shows the top X number of enriched GO terms, while the dot plot shows the enriched GO terms with their corresponding gene ratios.

Usage
~~~~~

::

    gproGraph(gpro_res, respath_plt1, respath_plt2, term_number)


Arguments
~~~~~~~~~

    * `gpro_res`: A result object generated by the gost function.
    * `respath_plt1`: A character string specifying the file path to save the bar chart.
    * `respath_plt2`: A character string specifying the file path to save the dot plot.
    * `term_number`: An integer specifying the number of categories to display in the plot.

Details
~~~~~~~
The gproGraph function first extracts the top X number of enriched GO terms from the gpro_res output, and then generates a bar plot of these terms using the gostplot function. The bar plot is saved to the file specified by respath_plt1. Next, the gpro_res output is modified to create a data frame suitable for generating the dot plot using the dotplot_internal function. The modified data frame includes the gene ratios for each enriched GO term, as well as the background gene ratios. The dot plot is saved to the file specified by respath_plt2.

Value
~~~~~
The gproGraph function does not return a value. It generates two plots and saves them to the specified files.

Examples
~~~~~~~~

::

    # Load example data
    data(genes)

    # Perform GO enrichment analysis
    gpro_res <- callAPI(gene_list = genes$gene_symbol,
                        background_list = background_list,
                        organism_name = "hsapiens",
                        pval_thr = 0.05,
                        correction = "fdr",
                        user_sources = c("GO:BP", "WP"),
                        respath = "test.txt"
                        )

    # Generate plots
    gproGraph(gpro_res, "barplot.png", "dotplot.png", 12)

